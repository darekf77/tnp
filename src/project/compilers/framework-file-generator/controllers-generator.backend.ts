import * as fse from 'fs-extra';
import * as path from 'path';
import * as JSON5 from 'json5';
import * as glob from 'glob';
import * as rimraf from 'rimraf';

import { Helpers } from '../../../index';
import { Project } from '../../index';
import { IncCompiler } from 'incremental-compiler';
import { config } from '../../../config';
import { EntitesGenerator } from './entities-generator.backend';



export class ControllersGenerator extends EntitesGenerator {

  protected generateControllersTs() {
    const isSite = false; // this.project.isSite;
    const cwd = isSite ? path.join(this.project.location, config.folder.custom, config.folder.src)
      : path.join(this.project.location, config.folder.src);

    if (!fse.existsSync(cwd)) {
      Helpers.log(`Controllers not geenrated, folder doesnt exists: ${cwd}`);
      return;
    }

    let controllersFiles = Helpers.morphi.getControllers(cwd);

    if (isSite) {
      controllersFiles = controllersFiles.filter(f => {
        const baselineFile = path.join(this.project.baseline.location, config.folder.src, f);
        return !fse.existsSync(baselineFile)
      })
    }

    // controllersFiles = controllersFiles.filter(f => {
    //   const fileAbsolutePatg = path.join(this.project.location, config.folder.src, f);
    //   return !fse.existsSync(baselineFile)
    // })

    controllersFiles = controllersFiles.map(f => `./${f.replace(/\.ts$/, '')}`)


    let newControllerFile = `
    //// FILE GENERATED BY TNP /////
    import { Morphi } from 'morphi';
    ${isSite ? `
    import { Controllers as BaselineControllers }  from '${this.project.parent.baseline.name}/${this.project.baseline.name}/src/controllers';
    import * as controllersBaseline from '${this.project.parent.baseline.name}/${this.project.baseline.name}/src/controllers';
    export * from '${this.project.parent.baseline.name}/${this.project.baseline.name}/src/controllers';
    `: ''}

    ${controllersFiles
        .map(f => this.controllersTemplateExportImport(cwd, f))
        .join('\n')}

      export const Controllers: Morphi.Base.Controller<any>[] = [
        ${controllersFiles
        .map(f => this.controllersArray(cwd, f))
        .join(',\n')}
      ]${isSite ? '.concat(BaselineControllers as any)' : ''} as any;

      //#${'region'} @backend

      import { CLASS } from 'typescript-class-helpers';
      import * as _ from 'lodash'

      export function controllers<ADDITIONAL={}>(decoratorsControllers?: ADDITIONAL) {
        return _.merge(${isSite ? 'controllersBaseline.controllers(),' : ''} {
          ${controllersFiles
        .map(f => this.controllersTemplateSingleton(cwd, f))
        .join('\n')}
      } ${isSite ? '' : ', decoratorsControllers'} );
      }
      //#end${'region'}
      `.split('\n')
      .map(l => l.trim())
      .join('\n');
    ;

    const controllerFilePath = path.join(cwd, 'controllers.ts');
    const currentFile = Helpers.readFile(controllerFilePath);

    if (currentFile !== newControllerFile) {
      Helpers.writeFile(controllerFilePath, newControllerFile)
    }
  }



  private controllersTemplateExportImport(srcPath, controllerRelativePath) {
    let controller = path.basename(controllerRelativePath);
    return `
    import { ${controller} } from '${controllerRelativePath}';
    export { ${controller} } from '${controllerRelativePath}';`
  }

  private controllersArray(srcPath, controllerRelativePath) {
    let controller = path.basename(controllerRelativePath);
    return controller
  }



  private controllersTemplateSingleton(srcPath, controllerRelativePath) {
    let controller = path.basename(controllerRelativePath);
    return `
    ${controller}: CLASS.getSingleton<${controller}>(${controller}),`
  }
}
