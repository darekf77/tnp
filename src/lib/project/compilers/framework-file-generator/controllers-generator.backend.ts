import { fse } from 'tnp-core/src'
import { path } from 'tnp-core/src'
import * as JSON5 from 'json5';
import { glob } from 'tnp-core/src';

import { Helpers } from 'tnp-helpers/src';
import { Project } from '../../index';
import { IncCompiler } from 'incremental-compiler/src';
import { config } from 'tnp-config/src';
import { EntitesGenerator } from './entities-generator.backend';


/**
 * @deprecated
 */
export class ControllersGenerator extends EntitesGenerator {

  // protected generateControllersTs(cwd: string, isSiteInStrictMode = false) {

  //   if (!fse.existsSync(cwd)) {
  //     Helpers.warn(`Controllers not geenrated, folder doesnt exists: ${cwd}`);
  //     return;
  //   }

  //   let controllersFiles = Helpers.morphi.getControllers(cwd);

  //   controllersFiles = controllersFiles.map(f => `./${f.replace(/\.ts$/, '')}`)


  //   let newControllerFile = `
  //   //// FILE GENERATED BY TNP /////
  //   import { Morphi } from 'morphi';
  //   ${isSiteInStrictMode ? `
  //   import { Controllers as BaselineControllers }  from '${this.project.parent.baseline.name}/${this.project.baseline.name}/src/controllers';
  //   import * as controllersBaseline from '${this.project.parent.baseline.name}/${this.project.baseline.name}/src/controllers';
  //   export * from '${this.project.parent.baseline.name}/${this.project.baseline.name}/src/controllers';
  //   `: ''}

  //   ${controllersFiles
  //       .map(f => this.controllersTemplateExportImport(cwd, f))
  //       .join('\n')}

  //     export const Controllers: Morphi.Base.Controller<any>[] = [
  //       ${controllersFiles
  //       .map(f => this.controllersArray(cwd, f))
  //       .join(',\n')}
  //     ]${isSiteInStrictMode ? '.concat(BaselineControllers as any)' : ''} as any;

  //     //#${'region'} @backend

  //     import { CLASS } from 'typescript-class-helpers';
  //     import { _ } from 'tnp-core'

  //     export function controllers<ADDITIONAL={}>(decoratorsControllers?: ADDITIONAL) {
  //       return _.merge(${isSiteInStrictMode ? 'controllersBaseline.controllers(),' : ''} {
  //         ${controllersFiles
  //       .map(f => this.controllersTemplateSingleton(cwd, f))
  //       .join('\n')}
  //     } ${isSiteInStrictMode ? '' : ', decoratorsControllers'} );
  //     }
  //     //#end${'region'}
  //     `.split('\n')
  //     .map(l => l.trim())
  //     .join('\n');
  //   ;

  //   const controllerFilePath = path.join(cwd, 'controllers.ts');
  //   const currentFile = Helpers.readFile(controllerFilePath);

  //   if (currentFile !== newControllerFile) {
  //     Helpers.writeFile(controllerFilePath, newControllerFile)
  //   }
  // }



  // private controllersTemplateExportImport(srcPath, controllerRelativePath) {
  //   let controller = path.basename(controllerRelativePath);
  //   return `
  //   import { ${controller} } from '${controllerRelativePath}';
  //   export { ${controller} } from '${controllerRelativePath}';`
  // }

  // private controllersArray(srcPath, controllerRelativePath) {
  //   let controller = path.basename(controllerRelativePath);
  //   return controller
  // }



  // private controllersTemplateSingleton(srcPath, controllerRelativePath) {
  //   let controller = path.basename(controllerRelativePath);
  //   return `
  //   ${controller}: CLASS.getSingleton<${controller}>(${controller}),`
  // }
}
