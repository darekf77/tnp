import { BaseFeatureForProject } from 'tnp-helpers/src';

import type { Project } from './project';

export class Linter // @ts-ignore TODO weird inheritance problem
  extends BaseFeatureForProject<Project>
{
  async init(): Promise<void> {
    this.recreateLintConfiguration();
  }

  //#region getters & methods / lint files

  get lintFiles(): Record<string, any> {
    //#region @backendFunc
    const files = {
      '.prettierignore': `
# This file is generated by taon.dev
/build
/coverage
/e2e
/docs
/node_modules
*.md
**/*.md
tmp-*
**/tmp-*
**/src/assets/**/*.*
/.build
/projects
*.js

/dist*
/bundle*
/browser
/browser*
/websql
/websql*
/module*
/backup
/module
/www

      `,
      '.prettierrc': {
        tabWidth: 2,
        useTabs: false,
        singleQuote: true,
        semi: true,
        bracketSpacing: true,
        arrowParens: 'avoid',
        trailingComma: 'all',
        bracketSameLine: true,
        printWidth: 80,
        singleAttributePerLine: true,
        endOfLine: 'auto',
      },
      '.editorconfig': `
# Editor configuration, see http://editorconfig.org
root = true

[*]
charset = utf-8
indent_style = space
indent_size = 2
insert_final_newline = true
trim_trailing_whitespace = true

[*.ts]
quote_type = single


[*.md]
max_line_length = off
trim_trailing_whitespace = false
`,
      // '.eslintrc': {
      //   "extends": ["prettier"],
      //   "plugins": ["prettier"],
      //   "rules": {
      //     "prettier/prettier": 2 // Means error
      //   }
      // }
    };
    return files;
    //#endregion
  }
  //#endregion

  //#region getters & methods / recreate lint configuration
  protected recreateLintConfiguration(): void {
    //#region @backendFunc
    const files = this.lintFiles;
    const settingsToOverride = {
      '[typescriptreact]': {
        'editor.defaultFormatter': 'esbenp.prettier-vscode',
        'editor.formatOnSave': false,
      },
      '[json]': {
        'editor.defaultFormatter': 'esbenp.prettier-vscode',
        'editor.formatOnSave': false,
      },
      '[jsonc]': {
        'editor.defaultFormatter': 'esbenp.prettier-vscode',
        'editor.formatOnSave': false,
      },
      '[json5]': {
        'editor.defaultFormatter': 'esbenp.prettier-vscode',
        'editor.formatOnSave': false,
      },
      '[scss]': {
        'editor.defaultFormatter': 'esbenp.prettier-vscode',
        'editor.formatOnSave': false,
      },
      '[html]': {
        'editor.defaultFormatter': 'esbenp.prettier-vscode',
        'editor.formatOnSave': false,
      },
      '[javascript]': {
        'editor.defaultFormatter': 'esbenp.prettier-vscode',
        'editor.formatOnSave': false,
      },
      '[typescript]': {
        'editor.defaultFormatter': 'esbenp.prettier-vscode',
        'editor.formatOnSave': false,
      },

      'editor.rulers': [80, 120],
      'eslint.migration.2_x': 'off',
      'eslint.enable': true,
      'prettier.enable': true,
      'editor.suggest.snippetsPreventQuickSuggestions': false,
      'editor.inlineSuggest.enabled': true,
      'prettier.prettierPath': './node_modules/prettier',
      'prettier.endOfLine': 'auto', // fix for jumpling to end of file when file > 100kb
      // 'tslint.autoFixOnSave': false,
      // 'tslint.enable': false,
      // 'tslint.alwaysShowRuleFailuresAsWarnings': false,
    };

    if (this.shouldNotEnableLintAndPrettier) {
      return;
    }
    const allowToRecreateLintFiles = this.project.typeIs(
      'isomorphic-lib',
      'container',
    );

    // console.log({ allowToRecreateLintFiles });
    if (allowToRecreateLintFiles) {
      // Helpers.info(`Reacreating lint configuration for ${this.genericName}`);
      this.project.artifactsManager.artifact.npmLibAndCliTool.filesRecreator.modifyVscode(
        settings => {
          return {
            ...settings,
            ...settingsToOverride,
          };
        },
      );
      Object.keys(files).forEach(file => {
        this.project.writeFile(file, files[file]);
      });
    } else {
      // Helpers.info(
      //   `Not reacreating lint configuration for ${this.genericName}`,
      // );
    }

    //#endregion
  }
  //#endregion

  //#region getters & methods / should not enable lint and prettier
  get shouldNotEnableLintAndPrettier(): boolean {
    return this.project.framework.isContainer;
  }
  //#endregion
}
