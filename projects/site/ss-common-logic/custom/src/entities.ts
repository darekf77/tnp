
//// FILE GENERATED BY TNP /////
import { Morphi } from 'morphi';
//#region @backend
import { repositoryFrom } from 'morphi/framework';
//#endregion

import { Entities as BaselineEntities }  from 'baseline/ss-common-logic/src/entities';
import * as baslineEntites from 'baseline/ss-common-logic/src/entities';
export * from 'baseline/ss-common-logic/src/entities';



import { BUILD, IBUILD } from './entities/BUILD';
export { BUILD, IBUILD } from './entities/BUILD';

import { DOMAIN, IDOMAIN } from './entities/DOMAIN';
export { DOMAIN, IDOMAIN } from './entities/DOMAIN';

import { ENVIRONMENT, IENVIRONMENT } from './entities/ENVIRONMENT';
export { ENVIRONMENT, IENVIRONMENT } from './entities/ENVIRONMENT';

import { PROJECT, IPROJECT } from './entities/PROJECT';
export { PROJECT, IPROJECT } from './entities/PROJECT';

import { SYSTEM_INFO, ISYSTEM_INFO } from './entities/SYSTEM_INFO';
export { SYSTEM_INFO, ISYSTEM_INFO } from './entities/SYSTEM_INFO';

import { TNP_PROJECT, ITNP_PROJECT } from './entities/TNP_PROJECT';
export { TNP_PROJECT, ITNP_PROJECT } from './entities/TNP_PROJECT';

export const Entities: Morphi.Base.Entity<any>[] = [
BUILD,
DOMAIN,
ENVIRONMENT,
PROJECT,
SYSTEM_INFO,
TNP_PROJECT
].concat(BaselineEntities as any) as any;

//#region @backend


import {   BUILD_REPOSITORY } from './repositories/BUILD_REPOSITORY';
export {   BUILD_REPOSITORY } from './repositories/BUILD_REPOSITORY';

import {   DOMAIN_REPOSITORY } from './repositories/DOMAIN_REPOSITORY';
export {   DOMAIN_REPOSITORY } from './repositories/DOMAIN_REPOSITORY';




import {   TNP_PROJECT_REPOSITORY } from './repositories/TNP_PROJECT_REPOSITORY';
export {   TNP_PROJECT_REPOSITORY } from './repositories/TNP_PROJECT_REPOSITORY';

import { Repository } from "typeorm";
export { Repository } from "typeorm";
import * as _ from 'lodash'

export function entities<ADDITIONAL={}>(connection?: Morphi.Orm.Connection, decoratorsEntities?: ADDITIONAL) {
return _.merge(baslineEntites.entities(connection),{

BUILD: repositoryFrom<BUILD , BUILD_REPOSITORY>(connection, BUILD , BUILD_REPOSITORY),

DOMAIN: repositoryFrom<DOMAIN , DOMAIN_REPOSITORY>(connection, DOMAIN , DOMAIN_REPOSITORY),

ENVIRONMENT: repositoryFrom<ENVIRONMENT>(connection, ENVIRONMENT),

PROJECT: repositoryFrom<PROJECT>(connection, PROJECT),

SYSTEM_INFO: repositoryFrom<SYSTEM_INFO>(connection, SYSTEM_INFO),

TNP_PROJECT: repositoryFrom<TNP_PROJECT , TNP_PROJECT_REPOSITORY>(connection, TNP_PROJECT , TNP_PROJECT_REPOSITORY),
}  );
}
//#endregion
